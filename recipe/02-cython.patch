Update add_cython_target() and friends.  From
https://github.com/scikit-build/scikit-build/tree/main/skbuild/resources/cmake.
--- a/cmake/Modules/FindCython.cmake
+++ b/cmake/Modules/FindCython.cmake
@@ -1,4 +1,6 @@
-# XXX From https://github.com/scikit-build/scikit-build/tree/master/skbuild/resources/cmake (2020-06-26), with modifications.
+# -*- mode: cmake -*-
+#
+# From https://github.com/scikit-build/scikit-build/blob/main/skbuild/resources/cmake/FindCython.cmake (2023-12-19)
 
 #.rst:
 #
@@ -15,7 +17,7 @@
 #  ``CYTHON_FOUND``
 #    true if the program was found
 #
-# For more information on the Cython project, see http://cython.org/.
+# For more information on the Cython project, see https://cython.org/.
 #
 # *Cython is a language that makes writing C extensions for the Python language
 # as easy as Python itself.*
@@ -38,8 +40,15 @@
 
 # Use the Cython executable that lives next to the Python executable
 # if it is a local installation.
-if(Python_Interpreter_FOUND)
+if(Python_EXECUTABLE)
   get_filename_component(_python_path ${Python_EXECUTABLE} PATH)
+elseif(Python3_EXECUTABLE)
+  get_filename_component(_python_path ${Python3_EXECUTABLE} PATH)
+elseif(DEFINED PYTHON_EXECUTABLE)
+  get_filename_component(_python_path ${PYTHON_EXECUTABLE} PATH)
+endif()
+
+if(DEFINED _python_path)
   find_program(CYTHON_EXECUTABLE
                NAMES cython cython.bat cython3
                HINTS ${_python_path}
@@ -57,7 +66,8 @@ if(CYTHON_EXECUTABLE)
                   OUTPUT_VARIABLE CYTHON_version_output
                   ERROR_VARIABLE CYTHON_version_error
                   RESULT_VARIABLE CYTHON_version_result
-                  OUTPUT_STRIP_TRAILING_WHITESPACE)
+                  OUTPUT_STRIP_TRAILING_WHITESPACE
+                  ERROR_STRIP_TRAILING_WHITESPACE)
 
   if(NOT ${CYTHON_version_result} EQUAL 0)
     set(_error_msg "Command \"${CYTHON_version_command}\" failed with")
@@ -65,17 +75,18 @@ if(CYTHON_EXECUTABLE)
     message(SEND_ERROR "${_error_msg}")
   else()
     if("${CYTHON_version_output}" MATCHES "^[Cc]ython version ([^,]+)")
-      string(STRIP "${CMAKE_MATCH_1}" CYTHON_VERSION)
-    elseif("${CYTHON_version_error}" MATCHES "^[Cc]ython version ([^,]+)")
-      string(STRIP "${CMAKE_MATCH_1}" CYTHON_VERSION)
+      set(CYTHON_VERSION "${CMAKE_MATCH_1}")
+    else()
+      if("${CYTHON_version_error}" MATCHES "^[Cc]ython version ([^,]+)")
+        set(CYTHON_VERSION "${CMAKE_MATCH_1}")
+      endif()
     endif()
   endif()
 endif()
 
 include(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(Cython REQUIRED_VARS CYTHON_EXECUTABLE VERSION_VAR CYTHON_VERSION)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Cython REQUIRED_VARS CYTHON_EXECUTABLE)
 
 mark_as_advanced(CYTHON_EXECUTABLE)
 
 include(UseCython)
-
--- a/cmake/Modules/FindPythonExtensions.cmake
+++ b/cmake/Modules/FindPythonExtensions.cmake
@@ -1,4 +1,6 @@
-# XXX From https://github.com/scikit-build/scikit-build/tree/master/skbuild/resources/cmake (2020-06-29), with modifications.
+# -*- mode: cmake -*-
+#
+# From https://github.com/scikit-build/scikit-build/blob/main/skbuild/resources/cmake/FindPythonExtensions.cmake (2023-12-19) with modifications
 
 #.rst:
 #
@@ -8,7 +10,20 @@
 # The following variables are defined:
 # ::
 #
-#   PYTHON_EXTENSION_MODULE_SUFFIX    - suffix of the compiled module.  For example, on
+#   PYTHON_PREFIX                     - absolute path to the current Python
+#                                       distribution's prefix
+#   PYTHON_SITE_PACKAGES_DIR          - absolute path to the current Python
+#                                       distribution's site-packages directory
+#   PYTHON_RELATIVE_SITE_PACKAGES_DIR - path to the current Python
+#                                       distribution's site-packages directory
+#                                       relative to its prefix
+#   PYTHON_SEPARATOR                  - separator string for file path
+#                                       components.  Equivalent to ``os.sep`` in
+#                                       Python.
+#   PYTHON_PATH_SEPARATOR             - separator string for PATH-style
+#                                       environment variables.  Equivalent to
+#                                       ``os.pathsep`` in Python.
+#   PYTHON_EXTENSION_MODULE_SUFFIX    - suffix of the compiled module. For example, on
 #                                       Linux, based on environment, it could be ``.cpython-35m-x86_64-linux-gnu.so``.
 #
 #
@@ -62,8 +77,8 @@
 # ``MODULE_SUFFIX <ModuleSuffix>``
 #   Suffix appended to the python extension module file.
 #   The default suffix is retrieved using ``sysconfig.get_config_var("SO")"``,
-#   if not available, the default is then ``.so`` on Unix and ``.pyd`` on
-#   Windows.
+#   if not available, the default is then ``.so`` on unix and ``.pyd`` on
+#   windows.
 #   Setting the variable ``PYTHON_EXTENSION_MODULE_SUFFIX`` in the caller
 #   scope defines the value used for all extensions not having a suffix
 #   explicitly specified using ``MODULE_SUFFIX`` parameter.
@@ -93,7 +108,7 @@
 #                         [HEADER_OUTPUT_VAR <HeaderOutputVar>]
 #                         [INCLUDE_DIR_OUTPUT_VAR <IncludeDirOutputVar>])
 #
-# without the extension is used as the logical name.
+# without the extension is used as the logical name.  If only ``<Name>`` is
 #
 # If only ``<Name>`` is provided, and it ends in the ".h" extension, then it
 # is assumed to be the ``<HeaderFilename>``.  The filename of the header file
@@ -103,7 +118,7 @@
 # The exact contents of the generated header file depend on the logical
 # ``<Name>``.  It should be set to a value that corresponds to the target
 # application, or for the case of multiple applications, some identifier that
-# conveys its purpose.  It is featured in the generated multiple inclusion
+# conveyes its purpose.  It is featured in the generated multiple inclusion
 # guard as well as the names of the generated initialization routines.
 #
 # The generated header file includes forward declarations for all listed
@@ -122,7 +137,7 @@
 #   preprocessing macro ``EXCLUDE_LOAD_ALL_FUNCTION`` is defined.
 #
 # ``void Py_Initialize_Wrapper();``
-#   Wrapper around ``Py_Initialize()`` that initializes all listed python
+#   Wrapper arpund ``Py_Initialize()`` that initializes all listed python
 #   extension modules.  This function is excluded during preprocessing if the
 #   preprocessing macro ``EXCLUDE_PY_INIT_WRAPPER`` is defined.  If this
 #   function is generated, then ``Py_Initialize()`` is redefined to a macro
@@ -157,8 +172,6 @@
 #
 # .. code-block:: cmake
 #
-#    find_package(PythonInterp)
-#    find_package(PythonLibs)
 #    find_package(PythonExtensions)
 #    find_package(Cython)
 #    find_package(Boost COMPONENTS python)
@@ -190,7 +203,7 @@
 #                            FORWARD_DECL_MODULES_VAR fdecl_module_list)
 #
 #    # module2 -- dynamically linked
-#    include_directories({Boost_INCLUDE_DIRS})
+#    include_directories(${Boost_INCLUDE_DIRS})
 #    add_library(module2 SHARED boost_module2.cxx)
 #    target_link_libraries(module2 ${Boost_LIBRARIES})
 #    python_extension_module(module2
@@ -233,45 +246,129 @@
 # limitations under the License.
 #=============================================================================
 
+find_package(Python3 COMPONENTS Interpreter REQUIRED)
+if(SKBUILD AND NOT Python3_LIBRARY)
+  set(Python3_LIBRARY "no-library-required")
+  find_package(PythonLibs)
+  unset(Python3_LIBRARY)
+  unset(Python3_LIBRARIES)
+else()
+  find_package(Python3 COMPONENTS Development)
+endif()
 include(targetLinkLibrariesWithDynamicLookup)
 
-if(NOT DEFINED PYTHON_EXTENSION_MODULE_SUFFIX)
-  set(_command "
-from sys import stdout, version_info
-from sysconfig import get_config_var
+set(_command "
+import itertools
+import os
+import os.path
+import site
+import sys
+
+from sysconfig import get_config_var, get_path
+
+result = None
+rel_result = None
+candidate_lists = []
+
+try:
+    candidate_lists.append((get_path('stdlib'),))
+except AttributeError: pass
+
+try:
+    candidate_lists.append(site.getsitepackages())
+except AttributeError: pass
+
+try:
+    candidate_lists.append((site.getusersitepackages(),))
+except AttributeError: pass
+
+candidates = itertools.chain.from_iterable(candidate_lists)
+
+for candidate in candidates:
+    rel_candidate = os.path.relpath(
+      candidate, sys.prefix)
+    if not rel_candidate.startswith(\"..\"):
+        result = candidate
+        rel_result = rel_candidate
+        break
+
+sys.stdout.write(\";\".join((
+    os.sep,
+    os.pathsep,
+    sys.prefix,
+    result,
+    rel_result,
+    get_config_var('EXT_SUFFIX')
+)))
+")
 
-ext_suffix_var = 'SO'
-if version_info[:2] >= (3, 5):
-    ext_suffix_var = 'EXT_SUFFIX'
+execute_process(COMMAND "${Python3_EXECUTABLE}" -c "${_command}"
+                OUTPUT_VARIABLE _list
+                RESULT_VARIABLE _result)
 
-stdout.write(get_config_var(ext_suffix_var))
-")
+list(GET _list 0 _item)
+set(PYTHON_SEPARATOR "${_item}")
+mark_as_advanced(PYTHON_SEPARATOR)
+
+list(GET _list 1 _item)
+set(PYTHON_PATH_SEPARATOR "${_item}")
+mark_as_advanced(PYTHON_PATH_SEPARATOR)
+
+list(GET _list 2 _item)
+set(PYTHON_PREFIX "${_item}")
+mark_as_advanced(PYTHON_PREFIX)
+
+list(GET _list 3 _item)
+set(PYTHON_SITE_PACKAGES_DIR "${_item}")
+mark_as_advanced(PYTHON_SITE_PACKAGES_DIR)
+
+list(GET _list 4 _item)
+set(PYTHON_RELATIVE_SITE_PACKAGES_DIR "${_item}")
+mark_as_advanced(PYTHON_RELATIVE_SITE_PACKAGES_DIR)
 
-  execute_process(COMMAND "${Python_EXECUTABLE}" -c "${_command}"
-                  OUTPUT_VARIABLE PYTHON_EXTENSION_MODULE_SUFFIX
-                  RESULT_VARIABLE _result)
+if(NOT DEFINED PYTHON_EXTENSION_MODULE_SUFFIX)
+  list(GET _list 5 _item)
+  set(PYTHON_EXTENSION_MODULE_SUFFIX "${_item}")
 endif()
 
 function(_set_python_extension_symbol_visibility _target)
-  if(Python_VERSION_MAJOR VERSION_GREATER 2)
+  if(Python3_VERSION_MAJOR VERSION_GREATER 2)
     set(_modinit_prefix "PyInit_")
   else()
     set(_modinit_prefix "init")
   endif()
+  message("_modinit_prefix:${_modinit_prefix}")
   if("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
     set_target_properties(${_target} PROPERTIES LINK_FLAGS
         "/EXPORT:${_modinit_prefix}${_target}"
     )
   elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU" AND NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+    # Option to not run version script. See https://github.com/scikit-build/scikit-build/issues/668
+    if(NOT DEFINED SKBUILD_GNU_SKIP_LOCAL_SYMBOL_EXPORT_OVERRIDE)
+       set(SKBUILD_GNU_SKIP_LOCAL_SYMBOL_EXPORT_OVERRIDE FALSE)
+    endif()
     set(_script_path
       ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${_target}-version-script.map
     )
-    file(WRITE ${_script_path}
-               "{global: ${_modinit_prefix}${_target}; local: *; };"
-    )
-    set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
+    # Export all symbols. See https://github.com/scikit-build/scikit-build/issues/668
+    if(SKBUILD_GNU_SKIP_LOCAL_SYMBOL_EXPORT_OVERRIDE)
+      file(WRITE ${_script_path}
+                 "{global: ${_modinit_prefix}${_target};};"
+      )
+    else()
+      file(WRITE ${_script_path}
+                 "{global: ${_modinit_prefix}${_target}; local: *;};"
+      )
+    endif()
+    if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
+      set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
         " -Wl,--version-script=\"${_script_path}\""
-    )
+      )
+    else()
+      set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
+        " -Wl,-M \"${_script_path}\""
+      )
+    endif()
   endif()
 endfunction()
 
@@ -325,7 +422,7 @@ function(python_extension_module _target)
   endif()
 
   if(NOT _is_non_lib)
-    include_directories("${Python_INCLUDE_DIRS}")
+    include_directories("${Python3_INCLUDE_DIRS}")
   endif()
 
   if(_is_module_lib)
@@ -350,7 +447,7 @@ function(python_extension_module _target)
       endif()
     endif()
 
-    target_link_libraries_with_dynamic_lookup(${_target} ${Python_LIBRARIES})
+    target_link_libraries_with_dynamic_lookup(${_target} ${Python3_LIBRARIES})
 
     if(_is_module_lib)
       _set_python_extension_symbol_visibility(${_target})
@@ -359,8 +456,8 @@ function(python_extension_module _target)
 endfunction()
 
 function(python_standalone_executable _target)
-  include_directories(${Python_INCLUDE_DIRS})
-  target_link_libraries(${_target} ${Python_LIBRARIES})
+  include_directories(${Python3_INCLUDE_DIRS})
+  target_link_libraries(${_target} ${SKBUILD_LINK_LIBRARIES_KEYWORD} ${Python3_LIBRARIES})
 endfunction()
 
 function(python_modules_header _name)
@@ -402,7 +499,7 @@ function(python_modules_header _name)
 
   set(generated_file_tmp "${generated_file}.in")
   file(WRITE ${generated_file_tmp}
-       "/* Created by CMake.  DO NOT EDIT; changes will be lost. */\n")
+       "/* Created by CMake. DO NOT EDIT; changes will be lost. */\n")
 
   set(_chunk "")
   set(_chunk "${_chunk}#ifndef ${_header_name_upper}\n")
@@ -501,3 +598,5 @@ function(python_modules_header _name)
   endif()
   set(${_include_dirs_var} ${CMAKE_CURRENT_BINARY_DIR} PARENT_SCOPE)
 endfunction()
+
+include(UsePythonExtensions)
--- a/cmake/Modules/UseCython.cmake
+++ b/cmake/Modules/UseCython.cmake
@@ -1,4 +1,6 @@
-# XXX From https://github.com/scikit-build/scikit-build/tree/master/skbuild/resources/cmake, pulled 2020-06-26
+# -*- mode: cmake -*-
+#
+# From https://github.com/scikit-build/scikit-build/blob/main/skbuild/resources/cmake/UseCython.cmake (2023-12-19)
 
 #.rst:
 #
@@ -45,7 +47,7 @@
 # ``PY2 | PY3``
 #   Force compilation using either Python-2 or Python-3 syntax and code
 #   semantics.  By default, Python-2 syntax and semantics are used if the major
-#   version of Python found is 2.  Otherwise, Python-3 syntax and sematics are
+#   version of Python found is 2.  Otherwise, Python-3 syntax and semantics are
 #   used.
 #
 # ``OUTPUT_VAR <OutputVar>``
@@ -58,13 +60,13 @@
 # ``<OutputVar>``
 #   The path of the generated source file.
 #
-# Cache variables that effect the behavior include:
+# Cache variables that affect the behavior include:
 #
 # ``CYTHON_ANNOTATE``
-#   whether to create an annotated .html file when compiling
+#   Whether to create an annotated .html file when compiling.
 #
 # ``CYTHON_FLAGS``
-#   additional flags to pass to the Cython compiler
+#   Additional flags to pass to the Cython compiler.
 #
 # Example usage
 # ^^^^^^^^^^^^^
@@ -103,7 +105,6 @@ set(CYTHON_ANNOTATE OFF
 set(CYTHON_FLAGS "" CACHE STRING
     "Extra flags to the cython compiler.")
 mark_as_advanced(CYTHON_ANNOTATE CYTHON_FLAGS)
-string(REGEX REPLACE " " ";" CYTHON_FLAGS_LIST "${CYTHON_FLAGS}")
 
 set(CYTHON_CXX_EXTENSION "cxx")
 set(CYTHON_C_EXTENSION "c")
@@ -146,12 +147,6 @@ function(add_cython_target _name)
     message(FATAL_ERROR "Either C or CXX must be enabled to use Cython")
   endif()
 
-  if("${Python_VERSION_MAJOR}" STREQUAL "2")
-    set(_input_syntax "PY2")
-  else()
-    set(_input_syntax "PY3")
-  endif()
-
   if(_args_EMBED_MAIN)
     set(_embed_main TRUE)
   endif()
@@ -164,6 +159,10 @@ function(add_cython_target _name)
     set(_output_syntax "CXX")
   endif()
 
+  # Doesn't select an input syntax - Cython
+  # defaults to 2 for Cython 2 and 3 for Cython 3
+  set(_input_syntax "default")
+
   if(_args_PY2)
     set(_input_syntax "PY2")
   endif()
@@ -209,15 +208,15 @@ function(add_cython_target _name)
   set(c_header_dependencies "")
 
   # Get the include directories.
-  get_source_file_property(pyx_location ${_source_file} LOCATION)
-  get_filename_component(pyx_path ${pyx_location} PATH)
   get_directory_property(cmake_include_directories
-                         DIRECTORY ${pyx_path}
+                         DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
                          INCLUDE_DIRECTORIES)
   list(APPEND cython_include_directories ${cmake_include_directories})
 
   # Determine dependencies.
   # Add the pxd file with the same basename as the given pyx file.
+  get_source_file_property(pyx_location ${_source_file} LOCATION)
+  get_filename_component(pyx_path ${pyx_location} PATH)
   get_filename_component(pyx_file_basename ${_source_file} NAME_WE)
   unset(corresponding_pxd_file CACHE)
   find_file(corresponding_pxd_file ${pyx_file_basename}.pxd
@@ -331,19 +330,11 @@ function(add_cython_target _name)
     set(annotate_arg "--annotate")
   endif()
 
-  set(no_docstrings_arg "")
-  if(CMAKE_BUILD_TYPE STREQUAL "Release" OR
-     CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
-    set(no_docstrings_arg "--no-docstrings")
-  endif()
-
   set(cython_debug_arg "")
-  set(embed_pos_arg "")
   set(line_directives_arg "")
   if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
      CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
     set(cython_debug_arg "--gdb")
-    set(embed_pos_arg "--embed-positions")
     set(line_directives_arg "--line-directives")
   endif()
 
@@ -358,12 +349,13 @@ function(add_cython_target _name)
   list(REMOVE_DUPLICATES pxd_dependencies)
   list(REMOVE_DUPLICATES c_header_dependencies)
 
+  string(REGEX REPLACE " " ";" CYTHON_FLAGS_LIST "${CYTHON_FLAGS}")
+
   # Add the command to run the compiler.
   add_custom_command(OUTPUT ${generated_file}
                      COMMAND ${CYTHON_EXECUTABLE}
                      ARGS ${cxx_arg} ${include_directory_arg} ${py_version_arg}
-                          ${embed_arg} ${annotate_arg} ${no_docstrings_arg}
-                          ${cython_debug_arg} ${embed_pos_arg}
+                          ${embed_arg} ${annotate_arg} ${cython_debug_arg}
                           ${line_directives_arg} ${CYTHON_FLAGS_LIST} ${pyx_location}
                           --output-file ${generated_file}
                      DEPENDS ${_source_file}
@@ -393,4 +385,3 @@ function(add_cython_target _name)
   set(header_location "" CACHE INTERNAL "")
   set(pxd_location "" CACHE INTERNAL "")
 endfunction()
-
--- /dev/null
+++ b/cmake/Modules/UsePythonExtensions.cmake
@@ -0,0 +1,324 @@
+# -*- mode: cmake -*-
+#
+# From https://github.com/scikit-build/scikit-build/blob/main/skbuild/resources/cmake/UsePythonExtensions.cmake (2023-12-19) with modifications
+
+#.rst:
+#
+# The following functions are defined:
+#
+# .. cmake:command:: add_python_library
+#
+# Add a library that contains a mix of C, C++, Fortran, Cython, F2PY, Template,
+# and Tempita sources. The required targets are automatically generated to
+# "lower" source files from their high-level representation to a file that the
+# compiler can accept.
+#
+#
+#   add_python_library(<Name>
+#                      SOURCES [source1 [source2 ...]]
+#                      [INCLUDE_DIRECTORIES [dir1 [dir2 ...]]
+#                      [LINK_LIBRARIES [lib1 [lib2 ...]]
+#                      [DEPENDS [source1 [source2 ...]]])
+#
+#
+# Example usage
+# ^^^^^^^^^^^^^
+#
+# .. code-block:: cmake
+#
+#   find_package(PythonExtensions)
+#
+#   file(GLOB arpack_sources ARPACK/SRC/*.f ARPACK/UTIL/*.f)
+#
+#    add_python_library(arpack_scipy
+#      SOURCES ${arpack_sources}
+#              ${g77_wrapper_sources}
+#      INCLUDE_DIRECTORIES ARPACK/SRC
+#    )
+#
+# .. cmake:command:: add_python_extension
+#
+# Add a extension that contains a mix of C, C++, Fortran, Cython, F2PY, Template,
+# and Tempita sources. The required targets are automatically generated to
+# "lower" source files from their high-level representation to a file that the
+# compiler can accept.
+#
+#
+#   add_python_extension(<Name>
+#                        SOURCES [source1 [source2 ...]]
+#                        [INCLUDE_DIRECTORIES [dir1 [dir2 ...]]
+#                        [LINK_LIBRARIES [lib1 [lib2 ...]]
+#                        [DEPENDS [source1 [source2 ...]]])
+#
+#
+# Example usage
+# ^^^^^^^^^^^^^
+#
+# .. code-block:: cmake
+#
+#   find_package(PythonExtensions)
+#
+#   file(GLOB arpack_sources ARPACK/SRC/*.f ARPACK/UTIL/*.f)
+#
+#    add_python_extension(arpack_scipy
+#      SOURCES ${arpack_sources}
+#              ${g77_wrapper_sources}
+#      INCLUDE_DIRECTORIES ARPACK/SRC
+#    )
+#
+#
+#=============================================================================
+# Copyright 2011 Kitware, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#=============================================================================
+
+macro(_remove_whitespace _output)
+  string(REGEX REPLACE "[ \r\n\t]+" " " ${_output} "${${_output}}")
+  string(STRIP "${${_output}}" ${_output})
+endmacro()
+
+function(add_python_library _name)
+  set(options STATIC SHARED MODULE)
+  set(multiValueArgs SOURCES INCLUDE_DIRECTORIES LINK_LIBRARIES COMPILE_DEFINITIONS DEPENDS)
+  cmake_parse_arguments(_args "${options}" "" "${multiValueArgs}" ${ARGN} )
+
+  # Validate arguments to allow simpler debugging
+  if(NOT _args_SOURCES)
+    message(
+      FATAL_ERROR
+      "You have called add_python_library for library ${_name} without "
+      "any source files. This typically indicates a problem with "
+      "your CMakeLists.txt file"
+    )
+  endif()
+
+  # Initialize the list of sources
+  set(_sources ${_args_SOURCES})
+
+  # Generate targets for all *.src files
+  set(_processed )
+  foreach(_source IN LISTS _sources)
+    if(${_source} MATCHES ".pyf.src$" OR ${_source} MATCHES "\\.f\\.src$")
+      if(NOT NumPy_FOUND)
+        message(
+          FATAL_ERROR
+          "NumPy is required to process *.src Template files"
+        )
+      endif()
+      string(REGEX REPLACE "\\.[^.]*$" "" _source_we ${_source})
+      add_custom_command(
+        OUTPUT ${_source_we}
+        COMMAND ${NumPy_FROM_TEMPLATE_EXECUTABLE}
+                ${CMAKE_CURRENT_SOURCE_DIR}/${_source}
+                ${CMAKE_CURRENT_BINARY_DIR}/${_source_we}
+        DEPENDS ${_source} ${_args_DEPENDS}
+        COMMENT "Generating ${_source_we} from template ${_source}"
+      )
+      list(APPEND _processed ${_source_we})
+    elseif(${_source} MATCHES "\\.c\\.src$")
+      if(NOT NumPy_FOUND)
+        message(
+          FATAL_ERROR
+          "NumPy is required to process *.src Template files"
+        )
+      endif()
+      string(REGEX REPLACE "\\.[^.]*$" "" _source_we ${_source})
+      add_custom_command(
+        OUTPUT ${_source_we}
+        COMMAND ${NumPy_CONV_TEMPLATE_EXECUTABLE}
+                ${CMAKE_CURRENT_SOURCE_DIR}/${_source}
+                ${CMAKE_CURRENT_BINARY_DIR}/${_source_we}
+        DEPENDS ${_source} ${_args_DEPENDS}
+        COMMENT "Generating ${_source_we} from template ${_source}"
+      )
+      list(APPEND _processed ${_source_we})
+    elseif(${_source} MATCHES "\\.pyx\\.in$")
+      if(NOT Cython_FOUND)
+        message(
+          FATAL_ERROR
+          "Cython is required to process *.in Tempita files"
+        )
+      endif()
+      string(REGEX REPLACE "\\.[^.]*$" "" _source_we ${_source})
+      configure_file(
+          ${CMAKE_CURRENT_SOURCE_DIR}/${_source}
+          ${CMAKE_CURRENT_BINARY_DIR}/${_source}
+          COPYONLY
+      )
+      set(_tempita_command
+          "
+            import os;
+            import sys;
+            from Cython.Tempita import Template;
+            cwd = os.getcwd();
+            open(os.path.join(cwd, '${_source_we}'), 'w+')
+            .write(
+                Template.from_filename(os.path.join(cwd, '${_source}'),
+                encoding=sys.getdefaultencoding()).substitute()
+            )
+          "
+      )
+      _remove_whitespace(_tempita_command)
+      add_custom_command(
+        OUTPUT ${_source_we}
+        COMMAND ${Python3_EXECUTABLE} -c "${_tempita_command}"
+        DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${_source}"
+                ${_args_DEPENDS}
+      )
+      list(APPEND _processed ${_source_we})
+    else()
+      list(APPEND _processed  ${_source})
+    endif()
+  endforeach()
+  set(_sources ${_processed})
+
+  # If we're building a Python extension and we're given only Fortran sources,
+  # We can conclude that we need to generate a Fortran interface file
+  list(FILTER _processed EXCLUDE REGEX "(\\.f|\\.f90)$")
+  if(NOT _processed AND _args_MODULE)
+    if(NOT NumPy_FOUND)
+        message(
+          FATAL_ERROR
+          "NumPy is required to process *.pyf F2PY files"
+        )
+    endif()
+    set(_sources_abs )
+    foreach(_source IN LISTS _sources)
+      if(NOT IS_ABSOLUTE ${_source})
+        set(_source ${CMAKE_CURRENT_SOURCE_DIR}/${_source})
+      endif()
+      list(APPEND _sources_abs ${_source})
+    endforeach()
+    add_custom_command(
+        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_name}.pyf
+        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+        COMMAND ${F2PY_EXECUTABLE}
+        ARGS -h ${_name}.pyf -m ${_name} --overwrite-signature
+             ${_sources_abs}
+        DEPENDS ${_sources} ${_args_DEPENDS}
+        COMMENT "Generating ${_name} Fortran interface file"
+    )
+    list(APPEND _sources ${_name}.pyf)
+  endif()
+
+  # Are there F2PY targets?
+  set(_has_f2py_targets OFF)
+  set(_has_cython_targets OFF)
+
+  # Generate targets for all *.pyx and *.pyf files
+  set(_processed )
+  foreach(_source IN LISTS _sources)
+    if(${_source} MATCHES \\.pyx$)
+      if(NOT Cython_FOUND)
+        message(
+          FATAL_ERROR
+          "Cython is required to process *.pyx Cython files"
+        )
+      endif()
+      string(REGEX REPLACE "\\.[^.]*$" "" _pyx_target_name ${_source})
+      set(_has_cython_targets ON)
+      add_cython_target(${_pyx_target_name}
+          ${_source}
+          OUTPUT_VAR _pyx_target_output
+          DEPENDS ${_args_DEPENDS}
+      )
+      list(APPEND _processed ${_pyx_target_output})
+    elseif(${_source} MATCHES \\.pyf$)
+      if(NOT NumPy_FOUND)
+          message(
+            FATAL_ERROR
+            "NumPy is required to process *.pyf F2PY files"
+          )
+      endif()
+      string(REGEX REPLACE "\\.[^.]*$" "" _pyf_target_name ${_source})
+      set(_has_f2py_targets ON)
+      add_f2py_target(${_pyf_target_name}
+          ${_source}
+          OUTPUT_VAR _pyf_target_output
+          DEPENDS ${_args_DEPENDS}
+      )
+      list(APPEND _processed  ${_pyf_target_output})
+    else()
+      list(APPEND _processed ${_source})
+    endif()
+  endforeach()
+  set(_sources ${_processed})
+
+  if(_args_SHARED)
+    add_library(${_name} SHARED ${_sources})
+  elseif(_args_MODULE)
+    add_library(${_name} MODULE ${_sources})
+  else()
+    # Assume static
+    add_library(${_name} STATIC ${_sources})
+  endif()
+
+  target_include_directories(${_name} PRIVATE ${_args_INCLUDE_DIRECTORIES})
+  target_link_libraries(${_name} ${SKBUILD_LINK_LIBRARIES_KEYWORD} ${_args_LINK_LIBRARIES})
+
+  if(_has_f2py_targets)
+    target_include_directories(${_name} PRIVATE ${F2PY_INCLUDE_DIRS})
+    target_link_libraries(${_name} ${SKBUILD_LINK_LIBRARIES_KEYWORD} ${F2PY_LIBRARIES})
+  endif()
+
+  if(_args_COMPILE_DEFINITIONS)
+    target_compile_definitions(${_name} PRIVATE ${_args_COMPILE_DEFINITIONS})
+  endif()
+
+  if(_args_DEPENDS)
+    add_custom_target(
+      "${_name}_depends"
+      DEPENDS ${_args_DEPENDS}
+    )
+    add_dependencies(${_name} "${_name}_depends")
+  endif()
+endfunction()
+
+function(add_python_extension _name)
+  # FIXME: make sure that extensions with the same name can happen
+  # in multiple directories
+
+  set(multiValueArgs SOURCES INCLUDE_DIRECTORIES LINK_LIBRARIES COMPILE_DEFINITIONS DEPENDS)
+  cmake_parse_arguments(_args "" "" "${multiValueArgs}" ${ARGN} )
+
+  # Validate arguments to allow simpler debugging
+  if(NOT _args_SOURCES)
+    message(
+      FATAL_ERROR
+      "You have called add_python_extension for library ${_name} without "
+      "any source files. This typically indicates a problem with "
+      "your CMakeLists.txt file"
+    )
+  endif()
+
+  add_python_library(${_name} MODULE
+    SOURCES ${_args_SOURCES}
+    INCLUDE_DIRECTORIES ${_args_INCLUDE_DIRECTORIES}
+    LINK_LIBRARIES ${_args_LINK_LIBRARIES}
+    COMPILE_DEFINITIONS ${_args_COMPILE_DEFINITIONS}
+    DEPENDS ${_args_DEPENDS}
+  )
+  python_extension_module(${_name})
+
+  file(RELATIVE_PATH _relative "${CMAKE_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
+  if(_relative STREQUAL "")
+    set(_relative ".")
+  endif()
+
+  install(
+    TARGETS ${_name}
+    LIBRARY DESTINATION "${_relative}"
+    RUNTIME DESTINATION "${_relative}"
+  )
+endfunction()
--- a/cmake/Modules/targetLinkLibrariesWithDynamicLookup.cmake
+++ b/cmake/Modules/targetLinkLibrariesWithDynamicLookup.cmake
@@ -1,4 +1,6 @@
-# XXX From https://github.com/scikit-build/scikit-build/tree/master/skbuild/resources/cmake, pulled 2020-06-29
+# -*- mode: cmake -*-
+#
+# From https://github.com/scikit-build/scikit-build/blob/main/skbuild/resources/cmake/targetLinkLibrariesWithDynamicLookup.cmake (2023-12-19)
 
 #.rst:
 #
@@ -200,6 +202,28 @@ function(_test_weak_link_project
   set(osx_dynamic_lookup           "-undefined dynamic_lookup")
   set(no_flag                                               "")
 
+  if(CMAKE_CROSSCOMPILING)
+    set(link_flag_spec "no_flag")
+    set(link_flag "${${link_flag_spec}}")
+    set(test_skipping_reason "")
+    set(test_pass FALSE)
+
+    if(APPLE AND NOT CMAKE_CROSSCOMPILING_EMULATOR)
+      set(link_flag_spec "osx_dynamic_lookup")
+      set(link_flag "${${link_flag_spec}}")
+      set(test_skipping_reason " (Cross compiling without emulator on macOS)")
+      set(test_pass TRUE)
+    endif()
+
+    if(test_pass)
+      set(test_description "Weak Link ${target_type} -> ${lib_type} (${link_flag_spec})")
+      message(STATUS "Performing Test ${test_description} - Assuming Success${test_skipping_reason}")
+      set(${can_weak_link_var} ${test_pass} PARENT_SCOPE)
+      set(${project_name} ${link_flag} PARENT_SCOPE)
+      return()
+    endif()
+  endif()
+
   foreach(link_flag_spec gnu_ld_ignore osx_dynamic_lookup no_flag)
     set(link_flag "${${link_flag_spec}}")
 
@@ -250,7 +274,7 @@ function(_test_weak_link_project
 
     if(link_mod_lib)
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
-        target_link_libraries(counter number)
+        target_link_libraries(counter ${SKBUILD_LINK_LIBRARIES_KEYWORD} number)
       ")
     elseif(NOT link_flag STREQUAL "")
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
@@ -264,21 +288,21 @@ function(_test_weak_link_project
 
     if(link_exe_lib)
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
-        target_link_libraries(main number)
+        target_link_libraries(main ${SKBUILD_LINK_LIBRARIES_KEYWORD} number)
       ")
     elseif(NOT link_flag STREQUAL "")
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
-        target_link_libraries(main \"${link_flag}\")
+        target_link_libraries(main ${SKBUILD_LINK_LIBRARIES_KEYWORD} \"${link_flag}\")
       ")
     endif()
 
     if(link_exe_mod)
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
-        target_link_libraries(main counter)
+        target_link_libraries(main ${SKBUILD_LINK_LIBRARIES_KEYWORD} counter)
       ")
     else()
       file(APPEND "${test_project_src_dir}/CMakeLists.txt" "
-        target_link_libraries(main \"${CMAKE_DL_LIBS}\")
+        target_link_libraries(main ${SKBUILD_LINK_LIBRARIES_KEYWORD} \"${CMAKE_DL_LIBS}\")
       ")
     endif()
 
@@ -364,7 +388,7 @@ function(_test_weak_link_project
       file(APPEND "${test_project_src_dir}/main.c" "
         goto done;
         error:
-          fprintf(stderr, \"Error occured:\\n    %s\\n\", dlerror());
+          fprintf(stderr, \"Error occurred:\\n    %s\\n\", dlerror());
           result = 1;
 
         done:
@@ -494,21 +518,15 @@ function(_check_dynamic_lookup
   endif()
 
   if(NOT DEFINED ${cache_var})
-    set(skip_test FALSE)
 
-   if(CMAKE_CROSSCOMPILING AND NOT CMAKE_CROSSCOMPILING_EMULATOR)
+    if(CMAKE_CROSSCOMPILING AND NOT CMAKE_CROSSCOMPILING_EMULATOR)
       set(skip_test TRUE)
     endif()
 
-    if(skip_test)
-      set(has_dynamic_lookup FALSE)
-      set(link_flags)
-    else()
-      _test_weak_link_project(${target_type}
-                              ${lib_type}
-                              has_dynamic_lookup
-                              link_flags)
-    endif()
+    _test_weak_link_project(${target_type}
+                            ${lib_type}
+                            has_dynamic_lookup
+                            link_flags)
 
     set(caveat " (when linking ${target_type} against ${lib_type})")
 
@@ -578,7 +596,6 @@ function(target_link_libraries_with_dynamic_lookup target)
 
   set(links "${link_items}" "${link_libs}")
   if(links)
-    target_link_libraries(${target} "${links}")
+    target_link_libraries(${target} ${SKBUILD_LINK_LIBRARIES_KEYWORD} "${links}")
   endif()
 endfunction()
-
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -619,22 +619,12 @@ if(BUILD_PYTHON_MODULE)
   # are determined by running the Python interpreter, which may not
   # work when crosscompiling.  In these cases,
   # Python3_NumPy_INCLUDE_DIR may have to be provided externally.
-  if(NOT Python3_NumPy_VERSION)
-    message(WARNING "Python3_NumPy_VERSION not set, may be crosscompiling")
-  elseif("${Python3_NumPy_VERSION}" VERSION_LESS "1.7")
+  if(NOT CMAKE_CROSSCOMPILING AND "${Python3_NumPy_VERSION}" VERSION_LESS "1.7")
     message(SEND_ERROR "Need NumPy >=1.7, found NumPy ${Python3_NumPy_VERSION}")
   endif()
 
-  # XXX This should really be fixed inside FindCython and friends.
-  foreach(var IN ITEMS Interpreter_FOUND
-                       EXECUTABLE
-                       INCLUDE_DIRS
-                       LIBRARIES
-                       VERSION_MAJOR)
-    set(Python_${var} "${Python3_${var}}")
-  endforeach()
-  find_package(Cython 0.27.1 REQUIRED)
   find_package(PythonExtensions)
+  find_package(Cython 0.27.1 REQUIRED)
 
   add_cython_target(pysmv pysmv.pyx)
   add_library(pysmv MODULE
@@ -687,14 +677,11 @@ if(BUILD_PYTHON_MODULE)
     target_sources(pysmv PRIVATE "getopt_long.c")
   endif()
 
-  set(PYTHON_SITE_PACKAGES "${Python3_SITEARCH}"
-    CACHE PATH
-    "Where to install pysmv Python module")
   install(
     TARGETS
       pysmv
     COMPONENT module
-    DESTINATION "${PYTHON_SITE_PACKAGES}")
+    DESTINATION "${PYTHON_SITE_PACKAGES_DIR}")
 endif()
 
 
--- a/src/pysmv.pyx
+++ b/src/pysmv.pyx
@@ -1,4 +1,5 @@
 # -*- mode: cython; coding: utf-8; indent-tabs-mode: nil; python-indent: 4 -*-
+# cython: language_level=3
 
 #-
 # Copyright © 2020-2022, Howard Hughes Medical Institute
